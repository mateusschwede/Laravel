========= INSTALAÇÃO =========
1- Instalar XAMPP
2- Composer: baixe o arquivo em composer.org, e enviá-lo para pasta de var referência global(no Windows somente executar)
- Testar composer: No terminal, execute o comando 'composer' para ver informações do mesmo

3- Instalar Último Laravel: laravel.com
Laravel 8.11 usado, com comandos de Laravel 6
- Via composer Create-Project: No diretório dos projetos, executar o comando:
composer create-project --prefer-dist laravel/laravel projeto1

4- Criar BD 'laravel', com comando, no diretório do projeto: php artisan migrate
(1º criar BD no Phpmyadmin, depois o comando gerará as tables)


========= FUNCIONAMENTO =========
Browser -> Routes(web.php) -> $controller:
                       | |-> $view -> Browser
                       |<-> Model <-> BD

1- User dispara ação no Browser para determinada url
2- Ação será capturada pelo routes web.php, no diretório Routes, que será roteado a um controller
3- Controller conversa com Model, que conversa com BD(PDO)
4- Informação do BD(falha/sucesso) volta ao Model e Controller
5- Controller chama View dinâmica(Blade), que enviará o resultado via Browser para User
- Pasta 'public' será onde o projeto é apresentado ao user

NA PRÁTICA:
(Atente-se com os 'use' e 'namespace', para checar se os mesmos correspondem à árvore de diretórios)
1- Criar route, comentá-la para criar o Controller
2- Criar controller, com artisan, e criar metodo que será lido na route
3- Testar, informando uri, se o método do controller e route funcionam
4- Criar view com Html
5- No controller, criar o metodo de return view, com parâmetros var visão e var controller
6- Na view, informar as vars({{$user->name}}) do informadas como parâmetros do método no controller

========= DIRETÓRIOS =========
- App/Models: Models(User.php Model de usuários)
- App/Http/Controllers: Controladores
- Resources/views: Views(ex welcome.blade.php)
- Routes: Rotas (web.php possui as rotas do Browser, api.php de APIs...)
- Vendor: Dependências (não mexer)
- .env: Configurações do Laravel(DBs, Drivers...)


========= ROUTES =========
- Listar routes: php artisan route::list
/*web.php*/
//Na url 'listagem_usuario', retorna nomeController@metodoController
//User informe 'listagem_usuario', levará ao UserController e retornará o listUser. Ex: http://localhost/projetos/laravel/projeto1/public/listagem_usuario 
use App\Http\Controllers\UserController; //import Controller
Route::get('listagem_usuario',[UserController::class,'listUser']);


========= CONTROLLER =========
> Criar Controller: executar, no diretório do projeto, o código: php artisan make:controller pasta\nomeController(ou sem pasta)

CONTROLLER COM VIEW
//Método UserController, em 'UserController.php'.
class UserController extends Controller {
    public function listUser() {
        echo "Listar Users";
    }
}

//Controller com dados de BD que envia à view
class UserController extends Controller {
    public function listUser() {
        //select user where id=1 somente o 1º que encontrar, abaixo
        $user = User::where('id','=',1)->first();
        return view('listUser',[
            'user' => $user
            //var visao => var controller
        ]);
    }
}

CONTROLLER COM MODEL
//Controller UserController.php adiciona novo user ao usuário, na rota, ir para url 'listagem_usuario'
class UserController extends Controller {
    public function listUser() {
        $user = new User();
        $user->name = 'Mateus';
        $user->email = 'mateus1908.schwede@gmail.com';
        $user->password = Hash::make('123');
        $user->save();
    }
}


========= VIEW =========
//View listUser.blade.php
<h1>Listagem Users</h1>
<p>Nome: {{ $user->name }}</p>
<p>Email: {{ $user->email }}</p>


AULA4
Automatizando com artisan e resource

> Criar controller com metodos à determinada view automaticamente:
php artisan make:controller Form\TestController --resource --model=User
(--resource cria todos os métodos do controller: verbalização rest e injeções de dependência automaticamente)
(--model=User criará automaticamente toda injeção de dependências dos demais parâmetros relacionados à model User)

> Criar view automatizada universal métodos CRUD
//Criador universal de rotas padrões para o controller TestController(get,post,put/patch,delete), altera o nome da route de 'usuario' para 'user', e altera os parâmetros de uri 'usuarios' para 'user'
Route::resource('usuarios',TestController::class)->names('user')->parameters(['usuarios'=>'user']);

> Alterar nome de trechos da uri para personalizados('original'=>'personalizado')
//Providers > AppServiceProvider.php, método boot()
use Illuminate\Support\Facades\Route;
public function boot() {
    Route::resourceVerbs([
        'create'=>'novo',
        'edit'=>'editar'
    ]);
}

>>>> PAROU AULA4 16:50 <<<<