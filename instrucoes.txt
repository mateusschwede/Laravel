========= INSTALAÇÃO =========
1- Instalar XAMPP
2- Composer: baixe o arquivo em composer.org, e enviá-lo para pasta de var referência global(no Windows somente executar)
- Testar composer: No terminal, execute o comando 'composer' para ver informações do mesmo

3- Instalar Último Laravel: laravel.com
Laravel 8.11 usado, com comandos de Laravel 6
-> CRIAR PROJETO: Via composer Create-Project: No diretório dos projetos, executar o comando:
composer create-project --prefer-dist laravel/laravel projeto1

4- Criar BD 'laravel', com comando, no diretório do projeto: php artisan migrate
(1º criar BD no Phpmyadmin, depois o comando gerará as tables)


========= FUNCIONAMENTO =========
Browser -> Routes(web.php) -> $controller:
                       | |-> $view -> Browser
                       |<-> Model <-> BD

1- User dispara ação no Browser para determinada url
2- Ação será capturada pelo routes web.php, no diretório Routes, que será roteado a um controller
3- Controller conversa com Model, que conversa com BD(PDO)
4- Informação do BD(falha/sucesso) volta ao Model e Controller
5- Controller chama View dinâmica(Blade), que enviará o resultado via Browser para User
- Pasta 'public' será onde o projeto é apresentado ao user

NA PRÁTICA:
(Atente-se com os 'use' e 'namespace', para checar se os mesmos correspondem à árvore de diretórios)
1- Criar route, comentá-la para criar o Controller
2- Criar controller, com artisan, e criar metodo que será lido na route
3- Testar, informando uri, se o método do controller e route funcionam
4- Criar view com Html
5- No controller, criar o metodo de return view, com parâmetros var visão e var controller
6- Na view, informar as vars({{$user->name}}) do informadas como parâmetros do método no controller

========= DIRETÓRIOS =========
- App/Models: Models(User.php Model de usuários)
- App/Http/Controllers: Controladores
- Resources/views: Views(ex welcome.blade.php)
- Routes: Rotas (web.php possui as rotas do Browser, api.php de APIs...)
- Vendor: Dependências (não mexer)
- .env: Configurações do Laravel(DBs, Drivers...)
- Database/Migrations: Migrations


========= ROUTES =========
- Listar routes: php artisan route::list
/*web.php*/
//Na url 'listagem_usuario', retorna nomeController@metodoController
//User informe 'listagem_usuario', levará ao UserController e retornará o listUser. Ex: http://localhost/projetos/laravel/projeto1/public/listagem_usuario 
use App\Http\Controllers\UserController; //import Controller
Route::get('listagem_usuario',[UserController::class,'listUser']);


========= CONTROLLER =========
> Criar Controller: executar, no diretório do projeto, o código: php artisan make:controller pasta\nomeController(ou sem pasta)

CONTROLLER COM VIEW
//Método UserController, em 'UserController.php'.
class UserController extends Controller {
    public function listUser() {
        echo "Listar Users";
    }
}

//Controller com dados de BD que envia à view
class UserController extends Controller {
    public function listUser() {
        //select user where id=1 somente o 1º que encontrar, abaixo
        $user = User::where('id','=',1)->first();
        return view('listUser',[
            'user' => $user
            //var visao => var controller
        ]);
    }
}

CONTROLLER COM MODEL
//Controller UserController.php adiciona novo user ao usuário, na rota, ir para url 'listagem_usuario'
class UserController extends Controller {
    public function listUser() {
        $user = new User();
        $user->name = 'Mateus';
        $user->email = 'mateus1908.schwede@gmail.com';
        $user->password = Hash::make('123');
        $user->save();
    }
}


========= VIEW =========
//View listUser.blade.php
<h1>Listagem Users</h1>
<p>Nome: {{ $user->name }}</p>
<p>Email: {{ $user->email }}</p>



>>> AULA4 <<<
Projeto3: Automatizando com artisan e resource

> Criar controller com metodos à determinada view automaticamente:
php artisan make:controller Form\TestController --resource --model=User
(--resource cria todos os métodos do controller: verbalização rest e injeções de dependência automaticamente)
(--model=User criará automaticamente toda injeção de dependências dos demais parâmetros relacionados à model User)

> Criar view automatizada universal métodos CRUD
//Criador universal de rotas padrões para o controller TestController(get,post,put/patch,delete), altera o nome da route de 'usuario' para 'user', e altera os parâmetros de uri 'usuarios' para 'user'
Route::resource('usuarios',TestController::class)->names('user')->parameters(['usuarios'=>'user']);

> Alterar nome de trechos da uri para personalizados('original'=>'personalizado')
//Providers > AppServiceProvider.php, método boot()
use Illuminate\Support\Facades\Route;
public function boot() {
    Route::resourceVerbs([
        'create'=>'novo',
        'edit'=>'editar'
    ]);
}

>>> CHECKLIST AULA4 <<<
1- Criação automatizada do controller
2- Criação, no routes 'web.php', da route automatizada resources. Tradução dos parâmetros uri na própria route
3- Alimentar views e, ao mesmo tempo, alimentação dos métodos do controller relacionados às mesmas, conforme parâmetros e BD


>>> AULA5 <<<
Projeto4: Versionando BD com Migrations
Ver anotações relacionadas no último arquivo do diretório migrations

Migrations:
Comandos de gestão de BD de dentro do Laravel, usando php
> Up: Comando de envio ao BD (ex: Create table)
> Down: Exatamente o contrário de Up, comando de retorno/desfazer ao BD (ex: Drop table). Down é o método, criado automaticamente, contrário ao criado no Up
Importante que as Migrations sejam criadas em ordem, de acordo com o BD, com relação às tables dependentes. Migrations são executadas em ordem crescente por criação.

Criar Migration:
Comando, no diretório do projeto, via terminal.
Criar nova table(Create Table):
php artisan make:migration comando_nomeTable_table(ex: create_users_table) --create=nomeTable(sintaxe de criação(create) à table nomeTable)

Adicionar novo campo à table existente(Alter Table):
php artisan make:migration comando_nomeTable_table --table=nomeTable

Criar BD após criadas as Migrations:
php artisan migrate (executa todos os arquivos de migrate criados pendentes)

Desfazer criação no BD:
php artisan migrate:rollback (desfaz todas as alterações no BD)
php artisan migrate:rollback --step=2 (No caso, desfazer os últimos 2 passos, ex: desfazer as últimas 2 migrations criadas no BD)

No final, em ambiente empresarial, faço commit de tudo, e a pessoa que trabalhará com o prjeto somente executa o 'php artisan migrate', e todo o BD será gerado/atualizado automaticamente



>>> ROTEIRO AULA6 <<<
Projeto5: Criando regra de negócio e configurando Model, manual e automatizado

Para criar Model, primeiro precisa de uma table do mesmo no BD sobre a mesma, criando nova Migration
> Atualizar/Resetar BD com projeto:
php artisan migrate:fresh (exlui tds as tables e recria com base nas Migrations do projeto)

> Criar Migration
php artisan make:migration create_posts_table

> Depois de codificar a Migration, atualizar/resetar BD com Migration pendente
php artisan migrate

> Criar Controller
php artisan make:controller PostController

> Modificar o método welcome em routes 'web.php', com o controller PostController, com método de execução 'showForm'

> Criar método 'showForm' no PostController, em branco

> Criar view de return do 'showForm', chamada 'form.blade.php', e populá-la com Html básico e @csrf

> Criar nova route em 'web.php', do tipo post, com nome e método chamados 'debug'

> No Controller 'PostController', criar método debug só com o inicial, e concluir o 'showForm'

> Inserir action como {{route}} na view 'form.blade.php'

> Popular método 'debug' no controller PostController

> Testar submissão do formulário Hmtl com 'dd($request->al());'

Para inserir os dados do form Html no BD, precisa-se criar a respectiva Model antes.

> Criar Model 'Post':
php artisan make:model Post

> Popular Model 'Post'
Laravel converte tudo para minúsculo e plural ao BD, ou seja, a table relacionada precisa ser 'posts'
1- Informar somente dados relacionados com BD no Controller 'PostController', no método 'debug'(remover o _token...)
2- Informar dados que serão enviados ao Model 'Post' para que possa serem persistidos ao BD(informar no método 'debug' do 'PostController')
Da forma acima, dará erro pq o slug precisa ser não null. Para contornar isso, segue:
> Na Model 'Post', informar e popular o método setPropriedadeAttribute($valorPassadoAtributo) (ex setTitleAttribute($value))
Com isso, automaticamente ao informar o title, ele informará o mesmo como slug, já formatado no formato url, gerados pelo método Str, já informado

> Testar, no formulário Html, a inserção de valores no BD

> (Não recomendável) Pode-se fazer o tratamento de erro de campos e slug de forma mais simples, criando, na Model 'Post', a propriedade fillable
> (Não recomendável) Caso queira remover os campos timestamp() do BD, precisa-se:
1- Remover o atributo na Migration
2- Na Model, inserir atributo 'public timestamps = false;'
3- Atualizar/Resetar BD com comando 'php artisan migrate:fresh'

AUTOMATIZADO
> Criar Model, com Migration e Controller:
php artisan make:model nomeModel -mcr (ex: php artisan make:model Product -mcr)
Após isso, será necessário somente:
1- Preencher campos na migration, de acordo com a respectiva table no DB
2- Informar atributos na Model
3- Informar as routes 'web.php' e programar os métodos no Controller
(Atente-se em informar e verificar os 'use' e 'namespace' corretos para os recursos em cada arquivo)



>>>> VER AULA7 <<<<